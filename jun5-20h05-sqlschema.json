{"TABLES" : ["badges",
"direct_conversations",
"direct_messages",
"donations",
"engagement_stats",
"event_participations",
"invitations",
"media_uploads",
"member_subscriptions",
"membership_plans",
"messages",
"moderation_logs",
"moodboard_items",
"moodboards",
"network_categories",
"network_events",
"network_files",
"network_invitation_links",
"network_news",
"network_poll_votes",
"network_polls",
"networks",
"notification_queue",
"opengraph_cache",
"portfolio_items",
"profiles",
"social_wall_comments",
"support_tickets",
"ticket_messages",
"user_badges",
"wiki_categories",
"wiki_comments",
"wiki_page_categories",
"wiki_page_permissions",
"wiki_pages",
"wiki_revisions"],
"COLUMNS" : ["badges.achieved_at (timestamp with time zone) timezone('utc'::text, now())",
"badges.color (character varying) 'primary'::character varying",
"badges.color (character varying) 'primary'::character varying",
"badges.created_at (timestamp with time zone NOT NULL) timezone('utc'::text, now())",
"badges.created_by (uuid)",
"badges.criteria_type (character varying NOT NULL)",
"badges.criteria_value (integer) 0",
"badges.description (text)",
"badges.icon (character varying NOT NULL)",
"badges.id (uuid NOT NULL) gen_random_uuid()",
"badges.is_active (boolean) true",
"badges.name (character varying NOT NULL)",
"badges.network_id (uuid)",
"badges.updated_at (timestamp with time zone NOT NULL) timezone('utc'::text, now())",
"direct_conversations.created_at (timestamp with time zone) now()",
"direct_conversations.id (uuid NOT NULL) uuid_generate_v4()",
"direct_conversations.last_message_at (timestamp with time zone) now()",
"direct_conversations.participants (ARRAY NOT NULL)",
"direct_conversations.updated_at (timestamp with time zone) now()",
"direct_messages.content (text NOT NULL)",
"direct_messages.conversation_id (uuid NOT NULL)",
"direct_messages.created_at (timestamp with time zone) now()",
"direct_messages.id (uuid NOT NULL) uuid_generate_v4()",
"direct_messages.media_metadata (jsonb) '{}'::jsonb",
"direct_messages.media_type (text)",
"direct_messages.media_url (text)",
"direct_messages.read_at (timestamp with time zone)",
"direct_messages.recipient_id (uuid)",
"direct_messages.sender_id (uuid NOT NULL)",
"donations.amount (numeric NOT NULL)",
"donations.created_at (timestamp with time zone) now()",
"donations.currency (text) 'EUR'::text",
"donations.donor_id (uuid)",
"donations.id (uuid NOT NULL) gen_random_uuid()",
"donations.is_anonymous (boolean) false",
"donations.message (text)",
"donations.network_id (uuid)",
"donations.stripe_payment_id (text)",
"engagement_stats.events_attended (integer) 0",
"engagement_stats.files_shared (integer) 0",
"engagement_stats.id (uuid NOT NULL) gen_random_uuid()",
"engagement_stats.last_active (timestamp with time zone NOT NULL) timezone('utc'::text, now())",
"engagement_stats.member_since (timestamp with time zone NOT NULL) timezone('utc'::text, now())",
"engagement_stats.messages_sent (integer) 0",
"engagement_stats.network_id (uuid)",
"engagement_stats.polls_participated (integer) 0",
"engagement_stats.posts_count (integer) 0",
"engagement_stats.updated_at (timestamp with time zone NOT NULL) timezone('utc'::text, now())",
"engagement_stats.user_id (uuid)",
"engagement_stats.wiki_contributions (integer) 0",
"event_participations.created_at (timestamp with time zone) now()",
"event_participations.event_id (uuid NOT NULL)",
"event_participations.id (uuid NOT NULL) uuid_generate_v4()",
"event_participations.payment_amount (numeric)",
"event_participations.payment_date (timestamp with time zone)",
"event_participations.payment_status (text) 'free'::text",
"event_participations.profile_id (uuid NOT NULL)",
"event_participations.status (character varying NOT NULL)",
"event_participations.stripe_payment_id (text)",
"event_participations.updated_at (timestamp with time zone) now()",
"invitations.created_at (timestamp with time zone) now()",
"invitations.email (text NOT NULL)",
"invitations.expires_at (timestamp with time zone)",
"invitations.id (uuid NOT NULL) uuid_generate_v4()",
"invitations.invited_by (uuid NOT NULL)",
"invitations.network_id (uuid NOT NULL)",
"invitations.role (text NOT NULL) 'member'::text",
"invitations.status (text NOT NULL) 'pending'::text",
"invitations.updated_at (timestamp with time zone) now()",
"media_uploads.created_at (timestamp with time zone) now()",
"media_uploads.dimensions (jsonb)",
"media_uploads.duration (double precision)",
"media_uploads.file_name (text)",
"media_uploads.file_size (bigint)",
"media_uploads.id (uuid NOT NULL) gen_random_uuid()",
"media_uploads.media_type (text NOT NULL)",
"media_uploads.metadata (jsonb) '{}'::jsonb",
"media_uploads.mime_type (text)",
"media_uploads.network_id (uuid)",
"media_uploads.uploaded_by (uuid)",
"media_uploads.url (text NOT NULL)",
"member_subscriptions.created_at (timestamp with time zone) now()",
"member_subscriptions.current_period_end (timestamp with time zone)",
"member_subscriptions.current_period_start (timestamp with time zone)",
"member_subscriptions.id (uuid NOT NULL) gen_random_uuid()",
"member_subscriptions.network_id (uuid)",
"member_subscriptions.plan_id (uuid)",
"member_subscriptions.profile_id (uuid)",
"member_subscriptions.status (text NOT NULL) 'active'::text",
"member_subscriptions.stripe_subscription_id (text)",
"member_subscriptions.updated_at (timestamp with time zone) now()",
"membership_plans.created_at (timestamp with time zone) now()",
"membership_plans.currency (text) 'EUR'::text",
"membership_plans.description (text)",
"membership_plans.features (jsonb) '[]'::jsonb",
"membership_plans.id (uuid NOT NULL) gen_random_uuid()",
"membership_plans.interval (text NOT NULL) 'month'::text",
"membership_plans.is_active (boolean) true",
"membership_plans.name (text NOT NULL)",
"membership_plans.network_id (uuid)",
"membership_plans.price (numeric NOT NULL) 0",
"membership_plans.stripe_price_id (text)",
"membership_plans.updated_at (timestamp with time zone) now()",
"messages.content (text NOT NULL)",
"messages.created_at (timestamp with time zone NOT NULL) timezone('utc'::text, now())",
"messages.flag_reason (text)",
"messages.id (uuid NOT NULL) uuid_generate_v4()",
"messages.is_flagged (boolean) false",
"messages.is_hidden (boolean) false",
"messages.media_metadata (jsonb) '{}'::jsonb",
"messages.media_type (text)",
"messages.media_url (text)",
"messages.network_id (uuid NOT NULL)",
"messages.parent_message_id (uuid)",
"messages.reply_to_content (text)",
"messages.reply_to_user_id (uuid)",
"messages.user_id (uuid NOT NULL)",
"moderation_logs.action (text NOT NULL)",
"moderation_logs.created_at (timestamp with time zone) now()",
"moderation_logs.id (uuid NOT NULL) uuid_generate_v4()",
"moderation_logs.moderator_id (uuid NOT NULL)",
"moderation_logs.network_id (uuid NOT NULL)",
"moderation_logs.reason (text)",
"moderation_logs.target_id (uuid NOT NULL)",
"moderation_logs.target_type (text NOT NULL)",
"moodboard_items.backgroundColor (text)",
"moodboard_items.border_radius (double precision) 0",
"moodboard_items.content (text NOT NULL)",
"moodboard_items.created_at (timestamp with time zone) now()",
"moodboard_items.created_by (uuid NOT NULL)",
"moodboard_items.font_family (text)",
"moodboard_items.font_size (text)",
"moodboard_items.font_weight (text)",
"moodboard_items.height (double precision NOT NULL) 200",
"moodboard_items.id (uuid NOT NULL) uuid_generate_v4()",
"moodboard_items.line_height (text)",
"moodboard_items.metadata (jsonb) '{}'::jsonb",
"moodboard_items.moodboard_id (uuid NOT NULL)",
"moodboard_items.opacity (double precision) 1",
"moodboard_items.rotation (double precision) 0",
"moodboard_items.textColor (text)",
"moodboard_items.text_align (text)",
"moodboard_items.title (text)",
"moodboard_items.type (text NOT NULL)",
"moodboard_items.updated_at (timestamp with time zone) now()",
"moodboard_items.width (double precision NOT NULL) 200",
"moodboard_items.x (double precision NOT NULL) 0",
"moodboard_items.y (double precision NOT NULL) 0",
"moodboard_items.zIndex (integer) 0",
"moodboards.background_color (text)",
"moodboards.created_at (timestamp with time zone) now()",
"moodboards.created_by (uuid NOT NULL)",
"moodboards.description (text)",
"moodboards.id (uuid NOT NULL) uuid_generate_v4()",
"moodboards.is_personal (boolean) false",
"moodboards.network_id (uuid NOT NULL)",
"moodboards.permissions (text NOT NULL) 'private'::text",
"moodboards.title (text NOT NULL)",
"moodboards.updated_at (timestamp with time zone) now()",
"network_categories.color (character varying)",
"network_categories.created_at (timestamp with time zone) now()",
"network_categories.created_by (uuid)",
"network_categories.description (text)",
"network_categories.id (uuid NOT NULL) gen_random_uuid()",
"network_categories.is_active (boolean) true",
"network_categories.name (character varying NOT NULL)",
"network_categories.network_id (uuid NOT NULL)",
"network_categories.slug (character varying NOT NULL)",
"network_categories.sort_order (integer) 0",
"network_categories.updated_at (timestamp with time zone) now()",
"network_events.capacity (integer)",
"network_events.coordinates (jsonb)",
"network_events.cover_image_url (text)",
"network_events.created_at (timestamp with time zone) now()",
"network_events.created_by (uuid NOT NULL)",
"network_events.currency (text) 'EUR'::text",
"network_events.date (timestamp with time zone NOT NULL)",
"network_events.description (text)",
"network_events.event_link (text)",
"network_events.id (uuid NOT NULL) uuid_generate_v4()",
"network_events.location (text NOT NULL)",
"network_events.max_tickets (integer)",
"network_events.network_id (uuid NOT NULL)",
"network_events.price (numeric) 0",
"network_events.tickets_sold (integer) 0",
"network_events.title (text NOT NULL)",
"network_files.created_at (timestamp with time zone) now()",
"network_files.description (text)",
"network_files.download_count (integer) 0",
"network_files.file_size (bigint NOT NULL)",
"network_files.file_type (text)",
"network_files.file_url (text NOT NULL)",
"network_files.filename (text NOT NULL)",
"network_files.filepath (text NOT NULL)",
"network_files.id (uuid NOT NULL) uuid_generate_v4()",
"network_files.network_id (uuid NOT NULL)",
"network_files.updated_at (timestamp with time zone) now()",
"network_files.uploaded_by (uuid NOT NULL)",
"network_invitation_links.code (character varying NOT NULL)",
"network_invitation_links.created_at (timestamp with time zone) now()",
"network_invitation_links.created_by (uuid NOT NULL)",
"network_invitation_links.description (text)",
"network_invitation_links.expires_at (timestamp with time zone)",
"network_invitation_links.id (uuid NOT NULL) uuid_generate_v4()",
"network_invitation_links.is_active (boolean) true",
"network_invitation_links.max_uses (integer)",
"network_invitation_links.name (character varying)",
"network_invitation_links.network_id (uuid NOT NULL)",
"network_invitation_links.role (character varying) 'member'::character varying",
"network_invitation_links.updated_at (timestamp with time zone) now()",
"network_invitation_links.uses_count (integer) 0",
"network_news.category_id (uuid)",
"network_news.content (text)",
"network_news.created_at (timestamp with time zone) now()",
"network_news.created_by (uuid)",
"network_news.flag_reason (text)",
"network_news.id (uuid NOT NULL) uuid_generate_v4()",
"network_news.image_caption (text)",
"network_news.image_url (text)",
"network_news.is_flagged (boolean) false",
"network_news.is_hidden (boolean) false",
"network_news.media_metadata (jsonb) '{}'::jsonb",
"network_news.media_type (text)",
"network_news.media_url (text)",
"network_news.network_id (uuid)",
"network_news.title (text)",
"network_poll_votes.created_at (timestamp with time zone) now()",
"network_poll_votes.id (uuid NOT NULL) uuid_generate_v4()",
"network_poll_votes.poll_id (uuid NOT NULL)",
"network_poll_votes.selected_options (jsonb NOT NULL)",
"network_poll_votes.user_id (uuid NOT NULL)",
"network_polls.allow_multiple_votes (boolean) false",
"network_polls.created_at (timestamp with time zone) now()",
"network_polls.created_by (uuid NOT NULL)",
"network_polls.description (text)",
"network_polls.ends_at (timestamp with time zone)",
"network_polls.id (uuid NOT NULL) uuid_generate_v4()",
"network_polls.is_anonymous (boolean) true",
"network_polls.network_id (uuid NOT NULL)",
"network_polls.options (jsonb)",
"network_polls.poll_type (character varying NOT NULL)",
"network_polls.starts_at (timestamp with time zone) now()",
"network_polls.status (character varying) 'active'::character varying",
"network_polls.title (character varying NOT NULL)",
"network_polls.updated_at (timestamp with time zone) now()",
"networks.background_image_url (text)",
"networks.created_at (timestamp with time zone) now()",
"networks.created_by (text)",
"networks.description (text)",
"networks.enabled_tabs (jsonb) '[\"news\", \"members\", \"events\", \"chat\", \"files\", \"wiki\"]'::jsonb",
"networks.features_config (jsonb) '{\"chat\": true, \"news\": true, \"wiki\": true, \"files\": true, \"events\": true, \"moodboards\": true, \"notifications\": true, \"location_sharing\": false}'::jsonb",
"networks.id (uuid NOT NULL) uuid_generate_v4()",
"networks.is_trial (boolean) false",
"networks.last_invoice_id (text)",
"networks.last_payment_date (timestamp with time zone)",
"networks.logo_url (text)",
"networks.name (text NOT NULL)",
"networks.privacy_level (text) 'private'::text",
"networks.purpose (text) 'general'::text",
"networks.stripe_account_id (text)",
"networks.stripe_customer_id (text)",
"networks.stripe_subscription_id (text)",
"networks.subscription_end_date (timestamp with time zone)",
"networks.subscription_plan (text) 'community'::text",
"networks.subscription_start_date (timestamp with time zone)",
"networks.subscription_status (text) 'free'::text",
"networks.subscription_updated_at (timestamp with time zone)",
"networks.theme_bg_color (character varying) '#ffffff'::character varying",
"networks.theme_color (text) '#1976d2'::text",
"networks.trial_days_used (integer) 0",
"networks.trial_end_date (timestamp with time zone)",
"networks.trial_start_date (timestamp with time zone)",
"notification_queue.content_preview (text)",
"notification_queue.created_at (timestamp with time zone) now()",
"notification_queue.error_message (text)",
"notification_queue.id (uuid NOT NULL) gen_random_uuid()",
"notification_queue.is_sent (boolean) false",
"notification_queue.network_id (uuid NOT NULL)",
"notification_queue.notification_type (character varying NOT NULL)",
"notification_queue.recipient_id (uuid NOT NULL)",
"notification_queue.related_item_id (uuid)",
"notification_queue.sent_at (timestamp with time zone)",
"notification_queue.subject_line (character varying NOT NULL)",
"opengraph_cache.created_at (timestamp with time zone) now()",
"opengraph_cache.data (jsonb NOT NULL)",
"opengraph_cache.id (uuid NOT NULL) uuid_generate_v4()",
"opengraph_cache.updated_at (timestamp with time zone) now()",
"opengraph_cache.url (text NOT NULL)",
"portfolio_items.category_id (uuid)",
"portfolio_items.created_at (timestamp with time zone) now()",
"portfolio_items.description (text)",
"portfolio_items.file_type (text)",
"portfolio_items.id (uuid NOT NULL) uuid_generate_v4()",
"portfolio_items.image_url (text)",
"portfolio_items.media_metadata (jsonb) '{}'::jsonb",
"portfolio_items.media_type (text)",
"portfolio_items.media_url (text)",
"portfolio_items.profile_id (uuid NOT NULL)",
"portfolio_items.title (text)",
"portfolio_items.url (text)",
"profiles.badge_count (integer) 0",
"profiles.bio (text)",
"profiles.contact_email (text)",
"profiles.created_at (timestamp with time zone NOT NULL) now()",
"profiles.email_notifications_enabled (boolean) true",
"profiles.full_name (text)",
"profiles.id (uuid NOT NULL)",
"profiles.is_suspended (boolean) false",
"profiles.last_active (timestamp with time zone)",
"profiles.linkedin_url (text)",
"profiles.network_id (uuid)",
"profiles.notify_on_direct_messages (boolean) true",
"profiles.notify_on_events (boolean) true",
"profiles.notify_on_mentions (boolean) true",
"profiles.notify_on_news (boolean) true",
"profiles.portfolio_data (jsonb)",
"profiles.portfolio_url (text)",
"profiles.profile_picture_url (text)",
"profiles.restriction_level (text)",
"profiles.restriction_reason (text)",
"profiles.role (text NOT NULL) 'member'::text",
"profiles.skills (ARRAY)",
"profiles.suspension_end_date (timestamp with time zone)",
"profiles.suspension_reason (text)",
"profiles.updated_at (timestamp with time zone)",
"social_wall_comments.content (text NOT NULL)",
"social_wall_comments.created_at (timestamp with time zone) now()",
"social_wall_comments.id (uuid NOT NULL) gen_random_uuid()",
"social_wall_comments.is_hidden (boolean) false",
"social_wall_comments.item_id (uuid NOT NULL)",
"social_wall_comments.item_type (character varying NOT NULL)",
"social_wall_comments.parent_comment_id (uuid)",
"social_wall_comments.profile_id (uuid NOT NULL)",
"social_wall_comments.updated_at (timestamp with time zone) now()",
"support_tickets.assigned_to (uuid)",
"support_tickets.category (character varying)",
"support_tickets.created_at (timestamp with time zone) now()",
"support_tickets.description (text NOT NULL)",
"support_tickets.id (uuid NOT NULL) gen_random_uuid()",
"support_tickets.network_id (uuid)",
"support_tickets.priority (character varying) 'medium'::character varying",
"support_tickets.resolved_at (timestamp with time zone)",
"support_tickets.status (character varying) 'open'::character varying",
"support_tickets.submitted_by (uuid)",
"support_tickets.title (character varying NOT NULL)",
"support_tickets.updated_at (timestamp with time zone) now()",
"ticket_messages.created_at (timestamp with time zone) now()",
"ticket_messages.id (uuid NOT NULL) gen_random_uuid()",
"ticket_messages.is_internal (boolean) false",
"ticket_messages.message (text NOT NULL)",
"ticket_messages.sender_id (uuid)",
"ticket_messages.ticket_id (uuid)",
"user_badges.awarded_at (timestamp with time zone NOT NULL) timezone('utc'::text, now())",
"user_badges.awarded_by (uuid)",
"user_badges.badge_id (uuid)",
"user_badges.id (uuid NOT NULL) gen_random_uuid()",
"user_badges.reason (text)",
"user_badges.user_id (uuid)",
"wiki_categories.created_at (timestamp with time zone) now()",
"wiki_categories.created_by (uuid)",
"wiki_categories.description (text)",
"wiki_categories.id (uuid NOT NULL) uuid_generate_v4()",
"wiki_categories.name (character varying NOT NULL)",
"wiki_categories.network_id (uuid NOT NULL)",
"wiki_categories.slug (character varying NOT NULL)",
"wiki_comments.content (text NOT NULL)",
"wiki_comments.created_at (timestamp with time zone) now()",
"wiki_comments.hidden_at (timestamp with time zone)",
"wiki_comments.hidden_by (uuid)",
"wiki_comments.id (uuid NOT NULL) uuid_generate_v4()",
"wiki_comments.is_hidden (boolean) false",
"wiki_comments.page_id (uuid NOT NULL)",
"wiki_comments.profile_id (uuid NOT NULL)",
"wiki_page_categories.category_id (uuid NOT NULL)",
"wiki_page_categories.page_id (uuid NOT NULL)",
"wiki_page_permissions.created_at (timestamp with time zone) now()",
"wiki_page_permissions.created_by (uuid NOT NULL)",
"wiki_page_permissions.id (uuid NOT NULL) uuid_generate_v4()",
"wiki_page_permissions.page_id (uuid NOT NULL)",
"wiki_page_permissions.profile_id (uuid)",
"wiki_page_permissions.role (character varying NOT NULL)",
"wiki_pages.content (text)",
"wiki_pages.created_at (timestamp with time zone) now()",
"wiki_pages.created_by (uuid)",
"wiki_pages.id (uuid NOT NULL) uuid_generate_v4()",
"wiki_pages.is_published (boolean) false",
"wiki_pages.last_edited_by (uuid)",
"wiki_pages.network_id (uuid NOT NULL)",
"wiki_pages.slug (character varying NOT NULL)",
"wiki_pages.title (character varying NOT NULL)",
"wiki_pages.updated_at (timestamp with time zone) now()",
"wiki_pages.views_count (integer) 0",
"wiki_revisions.approved_at (timestamp with time zone)",
"wiki_revisions.approved_by (uuid)",
"wiki_revisions.comment (character varying)",
"wiki_revisions.content (text NOT NULL)",
"wiki_revisions.created_at (timestamp with time zone) now()",
"wiki_revisions.created_by (uuid NOT NULL)",
"wiki_revisions.id (uuid NOT NULL) uuid_generate_v4()",
"wiki_revisions.is_approved (boolean) false",
"wiki_revisions.page_id (uuid NOT NULL)",
"wiki_revisions.revision_number (integer NOT NULL)"],
"FOREIGN_KEYS" : ["badges -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"badges -> profiles FOREIGN KEY (created_by) REFERENCES profiles(id)",
"direct_messages -> auth.users FOREIGN KEY (recipient_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL",
"direct_messages -> direct_conversations FOREIGN KEY (conversation_id) REFERENCES direct_conversations(id) ON DELETE CASCADE",
"direct_messages -> profiles FOREIGN KEY (sender_id) REFERENCES profiles(id)",
"direct_messages -> profiles FOREIGN KEY (sender_id) REFERENCES profiles(id)",
"donations -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"donations -> profiles FOREIGN KEY (donor_id) REFERENCES profiles(id) ON DELETE SET NULL",
"engagement_stats -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"engagement_stats -> profiles FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE",
"event_participations -> network_events FOREIGN KEY (event_id) REFERENCES network_events(id) ON DELETE CASCADE",
"event_participations -> profiles FOREIGN KEY (profile_id) REFERENCES profiles(id) ON DELETE CASCADE",
"invitations -> auth.users FOREIGN KEY (invited_by) REFERENCES auth.users(id) ON DELETE SET NULL",
"invitations -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"media_uploads -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"media_uploads -> profiles FOREIGN KEY (uploaded_by) REFERENCES profiles(id) ON DELETE SET NULL",
"member_subscriptions -> membership_plans FOREIGN KEY (plan_id) REFERENCES membership_plans(id) ON DELETE SET NULL",
"member_subscriptions -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"member_subscriptions -> profiles FOREIGN KEY (profile_id) REFERENCES profiles(id) ON DELETE CASCADE",
"membership_plans -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"messages -> messages FOREIGN KEY (parent_message_id) REFERENCES messages(id) ON DELETE CASCADE",
"messages -> networks FOREIGN KEY (network_id) REFERENCES networks(id)",
"messages -> profiles FOREIGN KEY (reply_to_user_id) REFERENCES profiles(id) ON DELETE SET NULL",
"messages -> profiles FOREIGN KEY (user_id) REFERENCES profiles(id)",
"moderation_logs -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"moderation_logs -> profiles FOREIGN KEY (moderator_id) REFERENCES profiles(id) ON DELETE SET NULL",
"moodboard_items -> moodboards FOREIGN KEY (moodboard_id) REFERENCES moodboards(id) ON DELETE CASCADE",
"moodboard_items -> profiles FOREIGN KEY (created_by) REFERENCES profiles(id) ON DELETE CASCADE",
"moodboards -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"moodboards -> profiles FOREIGN KEY (created_by) REFERENCES profiles(id) ON DELETE CASCADE",
"network_categories -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"network_categories -> profiles FOREIGN KEY (created_by) REFERENCES profiles(id) ON DELETE SET NULL",
"network_events -> networks FOREIGN KEY (network_id) REFERENCES networks(id)",
"network_events -> profiles FOREIGN KEY (created_by) REFERENCES profiles(id)",
"network_files -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"network_files -> profiles FOREIGN KEY (uploaded_by) REFERENCES profiles(id) ON DELETE CASCADE",
"network_invitation_links -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"network_invitation_links -> profiles FOREIGN KEY (created_by) REFERENCES profiles(id) ON DELETE CASCADE",
"network_news -> network_categories FOREIGN KEY (category_id) REFERENCES network_categories(id) ON DELETE SET NULL",
"network_news -> networks FOREIGN KEY (network_id) REFERENCES networks(id)",
"network_news -> profiles FOREIGN KEY (created_by) REFERENCES profiles(id)",
"network_poll_votes -> network_polls FOREIGN KEY (poll_id) REFERENCES network_polls(id) ON DELETE CASCADE",
"network_poll_votes -> profiles FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE",
"network_polls -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"network_polls -> profiles FOREIGN KEY (created_by) REFERENCES profiles(id) ON DELETE CASCADE",
"notification_queue -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"notification_queue -> profiles FOREIGN KEY (recipient_id) REFERENCES profiles(id) ON DELETE CASCADE",
"portfolio_items -> network_categories FOREIGN KEY (category_id) REFERENCES network_categories(id) ON DELETE SET NULL",
"portfolio_items -> profiles FOREIGN KEY (profile_id) REFERENCES profiles(id) ON DELETE CASCADE",
"profiles -> auth.users FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE",
"profiles -> networks FOREIGN KEY (network_id) REFERENCES networks(id)",
"social_wall_comments -> profiles FOREIGN KEY (profile_id) REFERENCES profiles(id) ON DELETE CASCADE",
"social_wall_comments -> social_wall_comments FOREIGN KEY (parent_comment_id) REFERENCES social_wall_comments(id) ON DELETE CASCADE",
"support_tickets -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"support_tickets -> profiles FOREIGN KEY (submitted_by) REFERENCES profiles(id) ON DELETE SET NULL",
"support_tickets -> profiles FOREIGN KEY (assigned_to) REFERENCES profiles(id) ON DELETE SET NULL",
"ticket_messages -> profiles FOREIGN KEY (sender_id) REFERENCES profiles(id) ON DELETE SET NULL",
"ticket_messages -> support_tickets FOREIGN KEY (ticket_id) REFERENCES support_tickets(id) ON DELETE CASCADE",
"user_badges -> badges FOREIGN KEY (badge_id) REFERENCES badges(id) ON DELETE CASCADE",
"user_badges -> profiles FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE",
"user_badges -> profiles FOREIGN KEY (awarded_by) REFERENCES profiles(id)",
"wiki_categories -> auth.users FOREIGN KEY (created_by) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL",
"wiki_categories -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"wiki_comments -> profiles FOREIGN KEY (profile_id) REFERENCES profiles(id)",
"wiki_comments -> profiles FOREIGN KEY (hidden_by) REFERENCES profiles(id)",
"wiki_comments -> wiki_pages FOREIGN KEY (page_id) REFERENCES wiki_pages(id) ON DELETE CASCADE",
"wiki_page_categories -> wiki_categories FOREIGN KEY (category_id) REFERENCES wiki_categories(id) ON DELETE CASCADE",
"wiki_page_categories -> wiki_pages FOREIGN KEY (page_id) REFERENCES wiki_pages(id) ON DELETE CASCADE",
"wiki_page_permissions -> profiles FOREIGN KEY (profile_id) REFERENCES profiles(id)",
"wiki_page_permissions -> profiles FOREIGN KEY (created_by) REFERENCES profiles(id)",
"wiki_page_permissions -> wiki_pages FOREIGN KEY (page_id) REFERENCES wiki_pages(id) ON DELETE CASCADE",
"wiki_pages -> networks FOREIGN KEY (network_id) REFERENCES networks(id) ON DELETE CASCADE",
"wiki_pages -> profiles FOREIGN KEY (created_by) REFERENCES profiles(id)",
"wiki_pages -> profiles FOREIGN KEY (last_edited_by) REFERENCES profiles(id)",
"wiki_revisions -> profiles FOREIGN KEY (approved_by) REFERENCES profiles(id)",
"wiki_revisions -> profiles FOREIGN KEY (created_by) REFERENCES profiles(id)",
"wiki_revisions -> wiki_pages FOREIGN KEY (page_id) REFERENCES wiki_pages(id) ON DELETE CASCADE"],
"RLS_POLICIES" : ["badges.Network creators and admins can manage badges (ALL) USING: ((EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = badges.network_id) AND (profiles.role = 'admin'::text)))) OR (EXISTS ( SELECT 1\n   FROM networks\n  WHERE ((networks.id = badges.network_id) AND (networks.created_by = (auth.uid())::text))))) | WITH CHECK: N/A",
"badges.Network members can view badges (SELECT) USING: ((is_active = true) AND (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = badges.network_id))))) | WITH CHECK: N/A",
"direct_conversations.Users can create conversations they're part of (INSERT) USING: N/A | WITH CHECK: (auth.uid() = ANY (participants))",
"direct_conversations.Users can delete conversations they're part of (DELETE) USING: (auth.uid() = ANY (participants)) | WITH CHECK: N/A",
"direct_conversations.Users can update conversations they're part of (UPDATE) USING: (auth.uid() = ANY (participants)) | WITH CHECK: N/A",
"direct_conversations.Users can view their own conversations (SELECT) USING: (auth.uid() = ANY (participants)) | WITH CHECK: N/A",
"direct_messages.Participants can update read_at (UPDATE) USING: (( SELECT auth.uid() AS uid) IN ( SELECT unnest(direct_conversations.participants) AS unnest\n   FROM direct_conversations\n  WHERE (direct_conversations.id = direct_messages.conversation_id))) | WITH CHECK: true",
"direct_messages.Users can send messages to their conversations (INSERT) USING: N/A | WITH CHECK: ((sender_id = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM direct_conversations\n  WHERE ((direct_conversations.id = direct_messages.conversation_id) AND (auth.uid() = ANY (direct_conversations.participants))))))",
"direct_messages.Users can view messages from their conversations (SELECT) USING: (EXISTS ( SELECT 1\n   FROM direct_conversations\n  WHERE ((direct_conversations.id = direct_messages.conversation_id) AND (auth.uid() = ANY (direct_conversations.participants))))) | WITH CHECK: N/A",
"donations.donations_insertable_by_users (INSERT) USING: N/A | WITH CHECK: (donor_id = auth.uid())",
"donations.donations_viewable_by_donor (SELECT) USING: (donor_id = auth.uid()) | WITH CHECK: N/A",
"donations.donations_viewable_by_network_admins (SELECT) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = donations.network_id) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"engagement_stats.Network admins can view network engagement stats (SELECT) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = engagement_stats.network_id) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"engagement_stats.System can update engagement stats (ALL) USING: true | WITH CHECK: N/A",
"engagement_stats.Users can view own engagement stats (SELECT) USING: (user_id = auth.uid()) | WITH CHECK: N/A",
"event_participations.Network admins can view all participations in their network (SELECT) USING: (EXISTS ( SELECT 1\n   FROM (profiles p\n     JOIN network_events e ON ((p.network_id = e.network_id)))\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text) AND (e.id = event_participations.event_id)))) | WITH CHECK: N/A",
"event_participations.Participations are viewable by everyone (SELECT) USING: true | WITH CHECK: N/A",
"event_participations.Users can manage their own participations (ALL) USING: (auth.uid() = profile_id) | WITH CHECK: (auth.uid() = profile_id)",
"media_uploads.Users can delete their own uploads (DELETE) USING: (auth.uid() = uploaded_by) | WITH CHECK: N/A",
"media_uploads.Users can upload media (INSERT) USING: N/A | WITH CHECK: (auth.uid() = uploaded_by)",
"media_uploads.Users can view their own uploads (SELECT) USING: (auth.uid() = uploaded_by) | WITH CHECK: N/A",
"media_uploads.media_uploads_deletable_by_owner (DELETE) USING: (uploaded_by = auth.uid()) | WITH CHECK: N/A",
"media_uploads.media_uploads_insertable_by_network_members (INSERT) USING: N/A | WITH CHECK: ((uploaded_by = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = media_uploads.network_id)))))",
"media_uploads.media_uploads_viewable_by_network_members (SELECT) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = media_uploads.network_id)))) | WITH CHECK: N/A",
"member_subscriptions.member_subscriptions_manageable_by_owner (INSERT) USING: N/A | WITH CHECK: (profile_id = auth.uid())",
"member_subscriptions.member_subscriptions_updatable_by_owner (UPDATE) USING: (profile_id = auth.uid()) | WITH CHECK: N/A",
"member_subscriptions.member_subscriptions_viewable_by_network_admins (SELECT) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = member_subscriptions.network_id) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"member_subscriptions.member_subscriptions_viewable_by_owner (SELECT) USING: (profile_id = auth.uid()) | WITH CHECK: N/A",
"membership_plans.membership_plans_manageable_by_admins (ALL) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = membership_plans.network_id) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"membership_plans.membership_plans_viewable_by_network_members (SELECT) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = membership_plans.network_id)))) | WITH CHECK: N/A",
"messages.Allow network members to read messages (SELECT) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.network_id = messages.network_id) AND (profiles.id = auth.uid())))) | WITH CHECK: N/A",
"messages.Allow network members to send messages (INSERT) USING: N/A | WITH CHECK: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.network_id = messages.network_id) AND (profiles.id = auth.uid()))))",
"messages.Users can view replies to messages in their network (SELECT) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = messages.network_id)))) | WITH CHECK: N/A",
"moderation_logs.Admins can insert moderation logs for their network (INSERT) USING: N/A | WITH CHECK: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = moderation_logs.network_id) AND (profiles.role = 'admin'::text))))",
"moderation_logs.Admins can view moderation logs for their network (SELECT) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = moderation_logs.network_id) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"moodboard_items.delete_moodboard_items_policy (DELETE) USING: (EXISTS ( SELECT 1\n   FROM moodboards\n  WHERE ((moodboards.id = moodboard_items.moodboard_id) AND ((moodboards.created_by = auth.uid()) OR (moodboard_items.created_by = auth.uid()) OR (EXISTS ( SELECT 1\n           FROM profiles\n          WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text) AND (profiles.network_id = moodboards.network_id)))) OR ((moodboards.permissions = 'collaborative'::text) AND (EXISTS ( SELECT 1\n           FROM profiles\n          WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = ( SELECT moodboards_1.network_id\n                   FROM moodboards moodboards_1\n                  WHERE (moodboards_1.id = moodboard_items.moodboard_id))))))))))) | WITH CHECK: N/A",
"moodboard_items.insert_moodboard_items_policy (INSERT) USING: N/A | WITH CHECK: (EXISTS ( SELECT 1\n   FROM moodboards\n  WHERE ((moodboards.id = moodboard_items.moodboard_id) AND ((moodboards.created_by = auth.uid()) OR (EXISTS ( SELECT 1\n           FROM profiles\n          WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text) AND (profiles.network_id = moodboards.network_id)))) OR ((moodboards.permissions = 'collaborative'::text) AND (EXISTS ( SELECT 1\n           FROM profiles\n          WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = ( SELECT moodboards_1.network_id\n                   FROM moodboards moodboards_1\n                  WHERE (moodboards_1.id = moodboard_items.moodboard_id)))))))))))",
"moodboard_items.update_moodboard_items_policy (UPDATE) USING: (EXISTS ( SELECT 1\n   FROM moodboards\n  WHERE ((moodboards.id = moodboard_items.moodboard_id) AND ((moodboards.created_by = auth.uid()) OR (moodboard_items.created_by = auth.uid()) OR (EXISTS ( SELECT 1\n           FROM profiles\n          WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text) AND (profiles.network_id = moodboards.network_id)))) OR ((moodboards.permissions = 'collaborative'::text) AND (EXISTS ( SELECT 1\n           FROM profiles\n          WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = ( SELECT moodboards_1.network_id\n                   FROM moodboards moodboards_1\n                  WHERE (moodboards_1.id = moodboard_items.moodboard_id))))))))))) | WITH CHECK: N/A",
"moodboard_items.view_moodboard_items_policy (SELECT) USING: (EXISTS ( SELECT 1\n   FROM moodboards\n  WHERE ((moodboards.id = moodboard_items.moodboard_id) AND ((moodboards.permissions = 'public'::text) OR (moodboards.created_by = auth.uid()) OR (EXISTS ( SELECT 1\n           FROM profiles\n          WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text) AND (profiles.network_id = moodboards.network_id)))) OR ((moodboards.permissions = 'collaborative'::text) AND (EXISTS ( SELECT 1\n           FROM profiles\n          WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = ( SELECT moodboards_1.network_id\n                   FROM moodboards moodboards_1\n                  WHERE (moodboards_1.id = moodboard_items.moodboard_id))))))))))) | WITH CHECK: N/A",
"moodboards.admin_moodboards_policy (ALL) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND ((profiles.role = 'admin'::text) OR (profiles.id = moodboards.created_by))))) | WITH CHECK: N/A",
"moodboards.delete_own_moodboards_policy (DELETE) USING: (created_by = auth.uid()) | WITH CHECK: N/A",
"moodboards.delete_personal_moodboards_policy (DELETE) USING: ((is_personal = true) AND (created_by = auth.uid())) | WITH CHECK: N/A",
"moodboards.insert_moodboards_policy (INSERT) USING: N/A | WITH CHECK: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = moodboards.network_id))))",
"moodboards.update_own_moodboards_policy (UPDATE) USING: (created_by = auth.uid()) | WITH CHECK: (created_by = auth.uid())",
"moodboards.update_personal_moodboards_policy (UPDATE) USING: ((is_personal = true) AND (created_by = auth.uid())) | WITH CHECK: N/A",
"moodboards.view_collaborative_moodboards_policy (SELECT) USING: ((permissions = 'collaborative'::text) AND (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = moodboards.network_id))))) | WITH CHECK: N/A",
"moodboards.view_personal_moodboards_policy (SELECT) USING: ((is_personal = true) AND (created_by = auth.uid())) | WITH CHECK: N/A",
"moodboards.view_public_moodboards_policy (SELECT) USING: (permissions = 'public'::text) | WITH CHECK: N/A",
"network_categories.network_categories_deletable_by_admins (DELETE) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = network_categories.network_id) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"network_categories.network_categories_insertable_by_admins (INSERT) USING: N/A | WITH CHECK: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = network_categories.network_id) AND (profiles.role = 'admin'::text))))",
"network_categories.network_categories_updatable_by_admins (UPDATE) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = network_categories.network_id) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"network_categories.network_categories_viewable_by_network_members (SELECT) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = network_categories.network_id)))) | WITH CHECK: N/A",
"network_files.Admins can manage all files in their network (ALL) USING: (network_id IN ( SELECT profiles.network_id\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"network_files.Users can delete their own files (DELETE) USING: (uploaded_by = auth.uid()) | WITH CHECK: N/A",
"network_files.Users can update their own files (UPDATE) USING: (uploaded_by = auth.uid()) | WITH CHECK: N/A",
"network_files.Users can upload files to their network (INSERT) USING: N/A | WITH CHECK: ((network_id IN ( SELECT profiles.network_id\n   FROM profiles\n  WHERE (profiles.id = auth.uid()))) AND (uploaded_by = auth.uid()))",
"network_files.Users can view files in their network (SELECT) USING: (network_id IN ( SELECT profiles.network_id\n   FROM profiles\n  WHERE (profiles.id = auth.uid()))) | WITH CHECK: N/A",
"network_invitation_links.Network admins can create invitation links (INSERT) USING: N/A | WITH CHECK: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = network_invitation_links.network_id) AND (profiles.role = 'admin'::text))))",
"network_invitation_links.Network admins can delete invitation links (DELETE) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = network_invitation_links.network_id) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"network_invitation_links.Network admins can update invitation links (UPDATE) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = network_invitation_links.network_id) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"network_invitation_links.Network admins can view invitation links (SELECT) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = network_invitation_links.network_id) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"network_invitation_links.Public can view active invitation links by code (SELECT) USING: ((is_active = true) AND ((expires_at IS NULL) OR (expires_at > now())) AND ((max_uses IS NULL) OR (uses_count < max_uses))) | WITH CHECK: N/A",
"network_poll_votes.Network members can vote (INSERT) USING: N/A | WITH CHECK: (EXISTS ( SELECT 1\n   FROM (profiles p\n     JOIN network_polls np ON ((np.network_id = p.network_id)))\n  WHERE ((p.id = auth.uid()) AND (np.id = network_poll_votes.poll_id) AND ((np.status)::text = 'active'::text) AND ((np.starts_at IS NULL) OR (np.starts_at <= now())) AND ((np.ends_at IS NULL) OR (np.ends_at > now())))))",
"network_poll_votes.Users can delete their own votes (DELETE) USING: ((auth.uid() = user_id) AND (EXISTS ( SELECT 1\n   FROM network_polls np\n  WHERE ((np.id = network_poll_votes.poll_id) AND ((np.status)::text = 'active'::text) AND ((np.ends_at IS NULL) OR (np.ends_at > now())))))) | WITH CHECK: N/A",
"network_poll_votes.Users can update their own votes (UPDATE) USING: ((auth.uid() = user_id) AND (EXISTS ( SELECT 1\n   FROM network_polls np\n  WHERE ((np.id = network_poll_votes.poll_id) AND ((np.status)::text = 'active'::text) AND ((np.ends_at IS NULL) OR (np.ends_at > now())))))) | WITH CHECK: N/A",
"network_poll_votes.Users can view their own votes (SELECT) USING: ((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM (profiles p\n     JOIN network_polls np ON ((np.network_id = p.network_id)))\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text) AND (np.id = network_poll_votes.poll_id))))) | WITH CHECK: N/A",
"network_polls.Network admins can create polls (INSERT) USING: N/A | WITH CHECK: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = network_polls.network_id) AND (profiles.role = 'admin'::text))))",
"network_polls.Network members can view polls (SELECT) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = network_polls.network_id)))) | WITH CHECK: N/A",
"network_polls.Poll creators and admins can delete polls (DELETE) USING: ((auth.uid() = created_by) OR (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = network_polls.network_id) AND (profiles.role = 'admin'::text))))) | WITH CHECK: N/A",
"network_polls.Poll creators and admins can update polls (UPDATE) USING: ((auth.uid() = created_by) OR (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = network_polls.network_id) AND (profiles.role = 'admin'::text))))) | WITH CHECK: N/A",
"notification_queue.Authenticated users can delete notifications (DELETE) USING: ((recipient_id = auth.uid()) OR (network_id IN ( SELECT profiles.network_id\n   FROM profiles\n  WHERE (profiles.id = auth.uid())))) | WITH CHECK: N/A",
"notification_queue.Authenticated users can insert notifications (INSERT) USING: N/A | WITH CHECK: true",
"notification_queue.Authenticated users can update notifications (UPDATE) USING: true | WITH CHECK: true",
"notification_queue.Network admins can view all network notifications (ALL) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text) AND (profiles.network_id = notification_queue.network_id)))) | WITH CHECK: N/A",
"notification_queue.Users can view relevant notifications (SELECT) USING: ((recipient_id = auth.uid()) OR (network_id IN ( SELECT profiles.network_id\n   FROM profiles\n  WHERE (profiles.id = auth.uid())))) | WITH CHECK: N/A",
"opengraph_cache.OpenGraph cache is readable by everyone (SELECT) USING: true | WITH CHECK: N/A",
"opengraph_cache.OpenGraph cache is updatable by authenticated users (INSERT) USING: N/A | WITH CHECK: true",
"opengraph_cache.OpenGraph cache is updatable update by authenticated users (UPDATE) USING: true | WITH CHECK: N/A",
"social_wall_comments.Network admins can hide/unhide comments (UPDATE) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text) AND (profiles.network_id IN ( SELECT\n                CASE\n                    WHEN ((social_wall_comments.item_type)::text = 'news'::text) THEN ( SELECT network_news.network_id\n                       FROM network_news\n                      WHERE (network_news.id = social_wall_comments.item_id))\n                    WHEN ((social_wall_comments.item_type)::text = 'post'::text) THEN ( SELECT profiles_1.network_id\n                       FROM profiles profiles_1\n                      WHERE (profiles_1.id IN ( SELECT portfolio_items.profile_id\n                               FROM portfolio_items\n                              WHERE (portfolio_items.id = social_wall_comments.item_id))))\n                    ELSE NULL::uuid\n                END AS \"case\"))))) | WITH CHECK: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text) AND (profiles.network_id IN ( SELECT\n                CASE\n                    WHEN ((social_wall_comments.item_type)::text = 'news'::text) THEN ( SELECT network_news.network_id\n                       FROM network_news\n                      WHERE (network_news.id = social_wall_comments.item_id))\n                    WHEN ((social_wall_comments.item_type)::text = 'post'::text) THEN ( SELECT profiles_1.network_id\n                       FROM profiles profiles_1\n                      WHERE (profiles_1.id IN ( SELECT portfolio_items.profile_id\n                               FROM portfolio_items\n                              WHERE (portfolio_items.id = social_wall_comments.item_id))))\n                    ELSE NULL::uuid\n                END AS \"case\")))))",
"social_wall_comments.Users can create comments (INSERT) USING: N/A | WITH CHECK: ((auth.uid() = profile_id) AND (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id IN ( SELECT\n                CASE\n                    WHEN ((social_wall_comments.item_type)::text = 'news'::text) THEN ( SELECT network_news.network_id\n                       FROM network_news\n                      WHERE (network_news.id = social_wall_comments.item_id))\n                    WHEN ((social_wall_comments.item_type)::text = 'post'::text) THEN ( SELECT profiles_1.network_id\n                       FROM profiles profiles_1\n                      WHERE (profiles_1.id IN ( SELECT portfolio_items.profile_id\n                               FROM portfolio_items\n                              WHERE (portfolio_items.id = social_wall_comments.item_id))))\n                    ELSE NULL::uuid\n                END AS \"case\"))))))",
"social_wall_comments.Users can delete own comments (DELETE) USING: (auth.uid() = profile_id) | WITH CHECK: N/A",
"social_wall_comments.Users can update own comments (UPDATE) USING: (auth.uid() = profile_id) | WITH CHECK: (auth.uid() = profile_id)",
"social_wall_comments.Users can view non-hidden comments (SELECT) USING: ((NOT is_hidden) OR (auth.uid() IN ( SELECT profiles.id\n   FROM profiles\n  WHERE ((profiles.role = 'admin'::text) AND (profiles.network_id IN ( SELECT\n                CASE\n                    WHEN ((social_wall_comments.item_type)::text = 'news'::text) THEN ( SELECT network_news.network_id\n                       FROM network_news\n                      WHERE (network_news.id = social_wall_comments.item_id))\n                    WHEN ((social_wall_comments.item_type)::text = 'post'::text) THEN ( SELECT profiles_1.network_id\n                       FROM profiles profiles_1\n                      WHERE (profiles_1.id IN ( SELECT portfolio_items.profile_id\n                               FROM portfolio_items\n                              WHERE (portfolio_items.id = social_wall_comments.item_id))))\n                    ELSE NULL::uuid\n                END AS \"case\")))))) | WITH CHECK: N/A",
"support_tickets.Create tickets - network admins and system (INSERT) USING: N/A | WITH CHECK: (((network_id IS NOT NULL) AND is_network_admin(network_id) AND (submitted_by = auth.uid())) OR ((network_id IS NULL) AND (submitted_by IS NULL)))",
"support_tickets.Create tickets - system anon (INSERT) USING: N/A | WITH CHECK: ((network_id IS NULL) AND (submitted_by IS NULL))",
"support_tickets.Create tickets - system generated anon (INSERT) USING: N/A | WITH CHECK: ((network_id IS NULL) AND (submitted_by IS NULL))",
"support_tickets.Create tickets - system generated authenticated (INSERT) USING: N/A | WITH CHECK: ((network_id IS NULL) AND (submitted_by IS NULL))",
"support_tickets.Update tickets - network admins their own (UPDATE) USING: ((submitted_by = auth.uid()) AND is_network_admin(network_id)) | WITH CHECK: ((submitted_by = auth.uid()) AND is_network_admin(network_id))",
"support_tickets.Update tickets - super admins any (UPDATE) USING: is_super_admin() | WITH CHECK: is_super_admin()",
"support_tickets.View tickets - network admins and super admins (SELECT) USING: (((network_id IS NOT NULL) AND is_network_admin(network_id)) OR is_super_admin()) | WITH CHECK: N/A",
"ticket_messages.Send messages - accessible tickets (INSERT) USING: N/A | WITH CHECK: ((sender_id = auth.uid()) AND (EXISTS ( SELECT 1\n   FROM support_tickets\n  WHERE ((support_tickets.id = ticket_messages.ticket_id) AND (is_network_admin(support_tickets.network_id) OR is_super_admin())))))",
"ticket_messages.View messages - accessible tickets (SELECT) USING: (EXISTS ( SELECT 1\n   FROM support_tickets\n  WHERE ((support_tickets.id = ticket_messages.ticket_id) AND (is_network_admin(support_tickets.network_id) OR is_super_admin())))) | WITH CHECK: N/A",
"user_badges.Anyone can view user badges (SELECT) USING: true | WITH CHECK: N/A",
"user_badges.Network creators and admins can manage user badges (ALL) USING: ((EXISTS ( SELECT 1\n   FROM (profiles p\n     JOIN badges b ON ((b.id = user_badges.badge_id)))\n  WHERE ((p.id = auth.uid()) AND (p.network_id = b.network_id) AND (p.role = 'admin'::text)))) OR (EXISTS ( SELECT 1\n   FROM (networks n\n     JOIN badges b ON ((b.network_id = n.id)))\n  WHERE ((n.created_by = (auth.uid())::text) AND (b.id = user_badges.badge_id))))) | WITH CHECK: N/A",
"wiki_pages.Anyone can view published wiki pages (SELECT) USING: (is_published = true) | WITH CHECK: N/A",
"wiki_pages.Network admins can insert wiki pages (INSERT) USING: N/A | WITH CHECK: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = ( SELECT auth.uid() AS uid)) AND (profiles.network_id = wiki_pages.network_id) AND (profiles.role = 'admin'::text))))",
"wiki_pages.Network admins can update wiki pages (UPDATE) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = wiki_pages.network_id) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"wiki_pages.Network admins can view all wiki pages (SELECT) USING: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.network_id = wiki_pages.network_id) AND (profiles.role = 'admin'::text)))) | WITH CHECK: N/A",
"wiki_pages.Network members can insert wiki pages (INSERT) USING: N/A | WITH CHECK: (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = ( SELECT auth.uid() AS uid)) AND (profiles.network_id = wiki_pages.network_id))))",
"wiki_pages.Page creators can update their own unpublished pages (UPDATE) USING: ((created_by = auth.uid()) AND (is_published = false)) | WITH CHECK: N/A"],
"FUNCTIONS" : ["add_moderation_columns_to_messages() Returns: void",
"add_moderation_columns_to_news() Returns: void",
"add_moderation_columns_to_profiles() Returns: void",
"check_and_award_badges(p_user_id uuid, p_network_id uuid) Returns: void",
"clean_old_opengraph_cache() Returns: void",
"create_default_badges() Returns: trigger",
"create_default_badges_for_network(network_id uuid) Returns: void",
"create_moderation_logs_table() Returns: void",
"generate_fake_profiles(num_profiles integer) Returns: void",
"generate_fake_users(num_users integer) Returns: SETOF uuid",
"generate_invitation_code() Returns: character varying",
"generate_slug(input_text text) Returns: text",
"get_database_stats() Returns: jsonb",
"get_parent_message_preview(message_id uuid) Returns: text",
"get_ticket_statistics() Returns: TABLE(total_tickets bigint, open_tickets bigint, in_progress_tickets bigint, urgent_tickets bigint, avg_resolution_time interval)",
"get_trial_days_remaining(network_id uuid) Returns: integer",
"handle_updated_at() Returns: trigger",
"increment_invitation_link_uses(link_code character varying) Returns: void",
"is_network_admin(network_uuid uuid) Returns: boolean",
"is_super_admin() Returns: boolean",
"is_trial_expired(network_id uuid) Returns: boolean",
"join_network_via_invitation_with_role(invitation_code character varying, user_id uuid, invitee_email character varying) Returns: TABLE(success boolean, network_id uuid, assigned_role character varying)",
"set_personal_moodboard_defaults() Returns: trigger",
"setup_new_network() Returns: trigger",
"should_notify_user(user_id uuid, notification_type character varying) Returns: boolean",
"update_badge_count() Returns: trigger",
"update_engagement_stats() Returns: trigger",
"update_invitation_status_on_join() Returns: trigger",
"update_modified_column() Returns: trigger",
"update_network_polls_updated_at() Returns: trigger",
"update_social_wall_comments_updated_at() Returns: trigger",
"update_trial_days_used() Returns: void",
"update_updated_at_column() Returns: trigger"],
"PROFILE_REFERENCES" : ["add_moderation_columns_to_profiles Contains: profiles",
"check_and_award_badges Contains: profiles",
"create_moderation_logs_table Contains: profiles + auth.uid()",
"generate_fake_profiles Contains: profiles",
"generate_fake_users Contains: auth.users",
"get_database_stats Contains: profiles",
"is_network_admin Contains: profiles + auth.uid()",
"join_network_via_invitation_with_role Contains: profiles",
"should_notify_user Contains: profiles",
"update_badge_count Contains: profiles"],
"PROFILES_FK_REFERENCES" : ["badges.created_by References: profiles.id | Constraint: badges_created_by_fkey",
"direct_messages.sender_id References: profiles.id | Constraint: fk_sender",
"direct_messages.sender_id References: profiles.id | Constraint: direct_messages_sender_id_fkey",
"donations.donor_id References: profiles.id | Constraint: donations_donor_id_fkey",
"engagement_stats.user_id References: profiles.id | Constraint: engagement_stats_user_id_fkey",
"event_participations.profile_id References: profiles.id | Constraint: event_participations_profile_id_fkey",
"media_uploads.uploaded_by References: profiles.id | Constraint: media_uploads_uploaded_by_fkey",
"member_subscriptions.profile_id References: profiles.id | Constraint: member_subscriptions_profile_id_fkey",
"messages.reply_to_user_id References: profiles.id | Constraint: messages_reply_to_user_id_fkey",
"messages.user_id References: profiles.id | Constraint: messages_user_id_fkey",
"moderation_logs.moderator_id References: profiles.id | Constraint: moderation_logs_moderator_id_fkey",
"moodboard_items.created_by References: profiles.id | Constraint: moodboard_items_created_by_fkey",
"moodboards.created_by References: profiles.id | Constraint: moodboards_created_by_fkey",
"network_categories.created_by References: profiles.id | Constraint: network_categories_created_by_fkey",
"network_events.created_by References: profiles.id | Constraint: network_events_created_by_fkey",
"network_files.uploaded_by References: profiles.id | Constraint: network_files_uploaded_by_fkey",
"network_invitation_links.created_by References: profiles.id | Constraint: network_invitation_links_created_by_fkey",
"network_news.created_by References: profiles.id | Constraint: network_news_created_by_fkey",
"network_poll_votes.user_id References: profiles.id | Constraint: network_poll_votes_user_id_fkey",
"network_polls.created_by References: profiles.id | Constraint: network_polls_created_by_fkey",
"notification_queue.recipient_id References: profiles.id | Constraint: notification_queue_recipient_id_fkey",
"portfolio_items.profile_id References: profiles.id | Constraint: portfolio_items_profile_id_fkey",
"social_wall_comments.profile_id References: profiles.id | Constraint: social_wall_comments_profile_id_fkey",
"support_tickets.assigned_to References: profiles.id | Constraint: support_tickets_assigned_to_fkey",
"support_tickets.submitted_by References: profiles.id | Constraint: support_tickets_submitted_by_fkey",
"ticket_messages.sender_id References: profiles.id | Constraint: ticket_messages_sender_id_fkey",
"user_badges.awarded_by References: profiles.id | Constraint: user_badges_awarded_by_fkey",
"user_badges.user_id References: profiles.id | Constraint: user_badges_user_id_fkey",
"wiki_comments.hidden_by References: profiles.id | Constraint: wiki_comments_hidden_by_fkey",
"wiki_comments.profile_id References: profiles.id | Constraint: wiki_comments_profile_id_fkey",
"wiki_page_permissions.created_by References: profiles.id | Constraint: wiki_page_permissions_created_by_fkey",
"wiki_page_permissions.profile_id References: profiles.id | Constraint: wiki_page_permissions_profile_id_fkey",
"wiki_pages.created_by References: profiles.id | Constraint: wiki_pages_created_by_fkey",
"wiki_pages.last_edited_by References: profiles.id | Constraint: wiki_pages_last_edited_by_fkey",
"wiki_revisions.approved_by References: profiles.id | Constraint: wiki_revisions_approved_by_fkey",
"wiki_revisions.created_by References: profiles.id | Constraint: wiki_revisions_created_by_fkey"]}